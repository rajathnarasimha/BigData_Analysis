# -*- coding: utf-8 -*-
"""VineReviewBiased.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xJ9fC46OV-wIzUEScOS6mxCLGFQAovwJ
"""

# Install Java, Spark, and Findspark
!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://www-us.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz
!tar xf spark-2.4.5-bin-hadoop2.7.tgz
!pip install -q findspark
# Set Environment Variables
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-2.4.5-bin-hadoop2.7"
# Start a SparkSession
import findspark
findspark.init()

# Start Spark session
from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("Vine_Review_Analysis").getOrCreate()

# Read in data from S3 Buckets
from pyspark import SparkFiles
url ="https://shruthiramu-bucket.s3.us-east-2.amazonaws.com/vine_table.csv"
spark.sparkContext.addFile(url)
df = spark.read.csv(SparkFiles.get("vine_table.csv"), sep=",", header=True)

# Show DataFrame
df.show()

#Rule: Consider reviews which have more than 0 helpful_votes and total_votes
df_votes_df = df.filter((df.helpful_votes > 0)& (df.total_votes > 0))
df_votes_df.show(10)

#Total reviews with more than 0 helpful_votes and total_votes in the dataset is..
df_votes_df.count()

#Total 5 start reviews including both vine and non vine:
df_votes_df.filter(df_votes_df.star_rating == "5").count()

#Number of Paid(vine) reviews are:
df_vine_df = df_votes_df.filter(df_votes_df.vine == "Y")
df_vine_df.count()

#Number of Non paid(non vine)reviews are:
df_non_vine_df = df_votes_df.filter(df.vine == "N")
df_non_vine_df.count()

#Number of Paid(vine) 5 star reviews are:
df_vine_df.filter(df_vine_df.star_rating == "5").count()

#Number of non - Paid(non - vine) 5 star reviews are:
df_non_vine_df.filter(df_non_vine_df.star_rating == "5").count()

#Average rating vine reviews
from pyspark.sql.functions import col, avg

df_vine_df.filter(df_vine_df['vine'] == "Y").agg(avg(col("star_rating"))).show()

#Average rating non vine reviews
df_non_vine_df.filter(df_non_vine_df['vine'] == "N").agg(avg(col("star_rating"))).show()

#Average rating for vine reviews is higher than average rating for non vine reviews.

#Number of helpful_votes in vine reviews:
cleaned_df = df_vine_df.withColumn("helpful_votes",df_vine_df["helpful_votes"].cast('int'))

cleaned_df.groupBy("helpful_votes").sum().show()

#Number of helpful_votes in non vine reviews:
cleaned_non_df = df_non_vine_df.withColumn("helpful_votes",df_non_vine_df["helpful_votes"].cast('int'))

cleaned_non_df.groupBy("helpful_votes").sum().show()
#Helpful votes are higher for the non vine reviews and are more spread.

df_votes_df.show(10)

df_votes_df.filter(df_votes_df.vine=="Y").count()

# Import functions
from pyspark.ml.feature import Tokenizer, StopWordsRemover, HashingTF, IDF, StringIndexer, CountVectorizerModel

pos_neg_to_num = StringIndexer(inputCol='vine',outputCol='label')

tokenizer = Tokenizer(inputCol="star_rating", outputCol="token_text")

hashingTF = HashingTF(inputCol="token_text", outputCol='hash_token')

idf = IDF(inputCol='hash_token', outputCol='features')

# Create and run a data processing Pipeline
from pyspark.ml import Pipeline
data_prep_pipeline = Pipeline(stages=[pos_neg_to_num, tokenizer, hashingTF, idf])

# Fit and transform the pipeline
cleaner = data_prep_pipeline.fit(df_votes_df)
cleaned = cleaner.transform(df_votes_df)

cleaned.select(["label", "features"]).show(truncate=False)
#Label 0.0 is here means it is a non-vine review

# Break data down into a training set and a testing set
training, testing = cleaned.randomSplit([0.7, 0.3])

from pyspark.ml.classification import NaiveBayes
# Create a Naive Bayes model and fit training data
nb = NaiveBayes()
predictor = nb.fit(training)

test_results = predictor.transform(testing)

test_results.show(5, truncate=False)

from pyspark.ml.evaluation import MulticlassClassificationEvaluator
acc_eval = MulticlassClassificationEvaluator()
acc= acc_eval.evaluate(test_results)

print("Accuracy of the model at predicting reviews was : %f" % acc)

# 1. The trustworthiness of non vine reviews are way less compared to the vine reviews are the accuracy of predicting non vine reviews is 0.998 ~ 1.
# 2. Also the Number of helpful votes were less for vine reviews than non vine reviews.